{"version":3,"sources":["chartConfigs/featureChartConfig.ts","components/StabilityChart/StabilityChart.tsx","components/NanStabilityChart/NanStabilityChart.tsx","components/MainChart/MainChart.tsx","chartConfigs/mainChartConfig.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["setFeatureChartConfig","id","title","showLabels","xFontSize","categoryArr","respBreak","data1","data2","options","chart","type","toolbar","show","tools","zoom","text","margin","stroke","width","xaxis","categories","labels","formatter","val","Number","toFixed","rotate","offsetY","style","fontSize","yaxis","align","minWidth","maxWidth","responsive","breakpoint","dataLabels","enabled","tooltip","followCursor","plotOptions","bar","horizontal","distributed","columnWidth","colors","legend","series","name","data","StabilityChart","stabilityData","currentFeature","useState","stabChartData","setStabChartData","showBar","setShowBar","dataPath","stabilityAnalysis","xLeftEdge","yBaseline","yProduction","useEffect","newConfig","className","onClick","height","NanStabilityChart","nanStabChartData","setNanStabChartData","nanStabilityAnalysis","importanceData","click","mainChartData","setMainChartData","events","trim","setMainChartConfig","names","importance","featureImportance","metrics","stability","productionModelMetrics","parameterStability","setColors","num","stabilityNumber","forEach","item","nanStab","stabilityGroup","stab","push","getHighestNum","colorArr","App","color","setCurrentFeature","setWidth","window","innerWidth","MainChart","event","target","attributes","featureIndex","indexOf","value","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3c3b8ca.chunk.js","sourcesContent":["import { ChartData } from '../types/types';\r\n\r\nexport const setFeatureChartConfig = (\r\n  id: string,\r\n  title: string,\r\n  showLabels: boolean,\r\n  xFontSize: string,\r\n  categoryArr: number[],\r\n  respBreak: number,\r\n  data1: number[],\r\n  data2: number[]\r\n): ChartData => {\r\n  return {\r\n    options: {\r\n      chart: {\r\n        type: 'bar',\r\n        id,\r\n        toolbar: {\r\n          show: true,\r\n          tools: {\r\n            zoom: true,\r\n          },\r\n        },\r\n      },\r\n      title: {\r\n        text: title,\r\n        margin: 20,\r\n      },\r\n      stroke: {\r\n        width: 2,\r\n      },\r\n      xaxis: {\r\n        categories: categoryArr,\r\n        labels: {\r\n          show: true,\r\n          formatter(val: string) {\r\n            return Number(val).toFixed(3);\r\n          },\r\n          rotate: -45,\r\n          offsetY: 2,\r\n          style: {\r\n            fontSize: xFontSize,\r\n          },\r\n        },\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          show: true,\r\n          align: 'right',\r\n          minWidth: 100,\r\n          maxWidth: 400,\r\n          style: {\r\n            fontSize: '10',\r\n          },\r\n        },\r\n      },\r\n      responsive: [\r\n        {\r\n          breakpoint: respBreak,\r\n          options: {\r\n            yaxis: {\r\n              labels: {\r\n                show: showLabels,\r\n                style: {\r\n                  fontSize: '9',\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n      tooltip: {\r\n        enabled: true,\r\n        followCursor: true,\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: false,\r\n          distributed: false,\r\n          columnWidth: '100%',\r\n        },\r\n      },\r\n      colors: ['#196D85', '#34B7DC'],\r\n      legend: {\r\n        show: false,\r\n      },\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Baseline',\r\n        data: data1,\r\n      },\r\n      {\r\n        name: 'Production',\r\n        data: data2,\r\n      },\r\n    ],\r\n  };\r\n};\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { ChartData, StabilityData } from '../../types/types';\r\nimport './StabilityChart.scss';\r\nimport { setFeatureChartConfig } from '../../chartConfigs/featureChartConfig';\r\n\r\ntype Props = {\r\n  stabilityData: StabilityData;\r\n  currentFeature: string;\r\n  width: number;\r\n};\r\n\r\nconst StabilityChart: FC<Props> = ({\r\n  stabilityData,\r\n  currentFeature,\r\n  width,\r\n}) => {\r\n  const [stabChartData, setStabChartData] = useState<ChartData>();\r\n  const [showBar, setShowBar] = useState(false);\r\n\r\n  const dataPath = stabilityData[currentFeature].stabilityAnalysis;\r\n  const categories = dataPath.xLeftEdge;\r\n  const data1 = dataPath.yBaseline;\r\n  const data2 = dataPath.yProduction;\r\n\r\n\r\n  useEffect(() => {\r\n    const newConfig = setFeatureChartConfig(\r\n      'stability-bar',\r\n      'Stability data',\r\n      width > 500,\r\n      '8.5',\r\n      categories,\r\n      width,\r\n      data1,\r\n      data2\r\n    );\r\n\r\n    setStabChartData(newConfig);\r\n  }, [currentFeature, width, showBar]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        className=\"toggleButton\"\r\n        onClick={() => setShowBar(!showBar)}\r\n      >\r\n        {showBar ? 'Switch to lines' : 'Switch to bars'}\r\n      </button>\r\n      {stabChartData && (\r\n        <>\r\n          <Chart\r\n            options={stabChartData.options}\r\n            series={stabChartData.series}\r\n            type={!showBar ? 'line' : 'bar'}\r\n            height=\"500\"\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StabilityChart;\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { ChartData, StabilityData } from '../../types/types';\r\nimport { setFeatureChartConfig } from '../../chartConfigs/featureChartConfig';\r\n\r\ntype Props = {\r\n  stabilityData: StabilityData;\r\n  currentFeature: string;\r\n};\r\n\r\nconst NanStabilityChart: FC<Props> = ({ stabilityData, currentFeature }) => {\r\n  const [nanStabChartData, setNanStabChartData] = useState<ChartData>();\r\n\r\n  const dataPath = stabilityData[currentFeature].nanStabilityAnalysis;\r\n  const categories = dataPath.xLeftEdge;\r\n  const data1 = dataPath.yBaseline;\r\n  const data2 = dataPath.yProduction;\r\n\r\n  useEffect(() => {\r\n    const newConfig = setFeatureChartConfig(\r\n      'nanStability-bar',\r\n      'NanStability data',\r\n      true,\r\n      '10',\r\n      categories,\r\n      0,\r\n      data1,\r\n      data2\r\n    );\r\n\r\n    setNanStabChartData(newConfig);\r\n  }, [stabilityData, currentFeature]);\r\n\r\n  return (\r\n    <>\r\n      {nanStabChartData && (\r\n        <Chart\r\n          options={nanStabChartData.options}\r\n          series={nanStabChartData.series}\r\n          type=\"bar\"\r\n          height=\"400\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NanStabilityChart;\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { ChartData, ImportanceData } from '../../types/types';\r\nimport { setMainChartConfig } from '../../chartConfigs/mainChartConfig';\r\n\r\ntype Props = {\r\n  importanceData: ImportanceData;\r\n  colors: string[];\r\n  width: number;\r\n  click: (event: {\r\n    target: { attributes: { val: { value: number } } };\r\n  }) => void;\r\n};\r\n\r\nconst NanStabilityChart: FC<Props> = ({\r\n  importanceData,\r\n  colors,\r\n  click,\r\n  width,\r\n}) => {\r\n  const [mainChartData, setMainChartData] = useState<ChartData>();\r\n\r\n  useEffect(() => {\r\n    const newConfig = setMainChartConfig(\r\n      click,\r\n      width > 500,\r\n      colors,\r\n      importanceData.names,\r\n      width,\r\n      width / 2,\r\n      importanceData.importance,\r\n    );\r\n\r\n    setMainChartData(newConfig);\r\n  }, [width]);\r\n\r\n  return (\r\n    <>\r\n      {mainChartData && (\r\n        <Chart\r\n          options={mainChartData.options}\r\n          series={mainChartData.series}\r\n          type=\"bar\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NanStabilityChart;\r\n","import { ChartData } from '../types/types';\r\n\r\nexport const setMainChartConfig = (\r\n  click: (event: { target: { attributes: { val: { value: number } } } })=> void,\r\n  showLabels: boolean,\r\n  colors: string[],\r\n  categoryArr: string[],\r\n  respBreak: number,\r\n  maxWidth: number,\r\n  data: number[],\r\n): ChartData => {\r\n  return {\r\n    options: {\r\n      chart: {\r\n        id: 'importance-bar',\r\n        events: { click },\r\n      },\r\n      xaxis: {\r\n        categories: categoryArr,\r\n        labels: {\r\n          show: true,\r\n          formatter(val: string) {\r\n            return Number(val).toFixed(1);\r\n          },\r\n        },\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          show: true,\r\n          align: 'right',\r\n          trim: false,\r\n          maxWidth: 800,\r\n          minWidth: 0,\r\n          style: {\r\n            fontSize: '10',\r\n          },\r\n        },\r\n      },\r\n      responsive: [\r\n        {\r\n          breakpoint: respBreak,\r\n          options: {\r\n            yaxis: {\r\n              labels: {\r\n                show: showLabels,\r\n                maxWidth,\r\n                style: {\r\n                  fontSize: '8',\r\n                },\r\n              },\r\n            },\r\n            xaxis: {\r\n              labels: {\r\n                style: {\r\n                  fontSize: '8',\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      title: {\r\n        text: '',\r\n        margin: 0,\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: true,\r\n          distributed: true,\r\n        },\r\n      },\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n      legend: {\r\n        show: false,\r\n      },\r\n      colors,\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Importance',\r\n        data,\r\n      },\r\n    ],\r\n  };\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport importance from './data/feature_importance.json';\r\nimport stability from './data/feature_stability.json';\r\nimport StabilityChart from './components/StabilityChart/StabilityChart';\r\nimport NanStabilityChart from './components/NanStabilityChart/NanStabilityChart';\r\nimport MainChart from './components/MainChart/MainChart';\r\nimport { ImportanceData, StabilityData } from './types/types';\r\n\r\nconst splitWords = (text: string) => {\r\n  return text.replace(/_/g, ' ');\r\n};\r\n\r\nconst importanceData: ImportanceData = importance.data.featureImportance.metrics;\r\nconst stabilityData: StabilityData = stability.data.productionModelMetrics.parameterStability;\r\n\r\nconst getHighestNum = () => {\r\n  const stabilityNumber: number[] = [];\r\n  \r\n  importanceData.names.forEach((item) => {\r\n    const nanStab = stabilityData[item].nanStabilityAnalysis.stabilityGroup[0];\r\n    const stab = stabilityData[item].stabilityAnalysis.stabilityGroup[0];\r\n\r\n    if (nanStab > stab) {\r\n      stabilityNumber.push(nanStab);\r\n    } else {\r\n      stabilityNumber.push(stab);\r\n    }\r\n  });\r\n  return stabilityNumber;\r\n};\r\n\r\nconst setColors = () => {\r\n  const num = getHighestNum();\r\n  const colorArr: string[] = [];\r\n\r\n  num.forEach((item) => {\r\n    switch (item) {\r\n      case 1:\r\n        colorArr.push('#73C200');\r\n        break;\r\n      case 2:\r\n        colorArr.push('#F09C00');\r\n        break;\r\n      default:\r\n        colorArr.push('#D63700');\r\n        break;\r\n    }\r\n  });\r\n  return colorArr;\r\n};\r\n\r\nconst App = () => {\r\n  const [currentFeature, setCurrentFeature] = useState({ name: '', color: '' });\r\n  const [width, setWidth] = useState(1200);\r\n\r\n  useEffect(() => {\r\n    if (window.innerWidth <= 500) {\r\n      setWidth(500);\r\n    } else if (window.innerWidth <= 660) {\r\n      setWidth(660);\r\n    } else if (window.innerWidth <= 1023) {\r\n      setWidth(1023);\r\n    }\r\n  }, []);\r\n\r\n  // Selecting a feature\r\n  const click = (event: {\r\n    target: { attributes: { val: { value: number } } };\r\n  }) => {\r\n    if (!importanceData || !event.target.attributes.val) {\r\n      return;\r\n    }\r\n    const featureIndex = importanceData.importance.indexOf(\r\n      Number(event.target.attributes.val.value)\r\n    );\r\n\r\n    setCurrentFeature({\r\n      name: importanceData.names[featureIndex],\r\n      color: setColors()[featureIndex],\r\n    });\r\n  };\r\n\r\n  if (!importanceData && !stabilityData) {\r\n    return <h1>loading...</h1>;\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"container container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-12\">\r\n            <MainChart\r\n              click={click}\r\n              width={width}\r\n              colors={setColors()}\r\n              importanceData={importanceData}\r\n            />\r\n          </div>\r\n        </div>\r\n        {currentFeature.name && (\r\n          <>\r\n            <div className=\"row center-xs\">\r\n              <div className=\"col-xs-12\">\r\n                <h3>Value distribution</h3>\r\n                <h4 className=\"heading\" style={{ color: currentFeature.color }}>\r\n                  {splitWords(currentFeature.name)}\r\n                </h4>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-xs-12\">\r\n                <StabilityChart\r\n                  stabilityData={stabilityData}\r\n                  width={width}\r\n                  currentFeature={currentFeature.name}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-6 col-xs-12\">\r\n                <NanStabilityChart\r\n                  stabilityData={stabilityData}\r\n                  currentFeature={currentFeature.name}\r\n                />\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'flexboxgrid';\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}